<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Kodfabrik Blog</title>
  <link href="http://io.kodfabrik.com/atom.xml" rel="self"/>
  <link href="http://io.kodfabrik.com"/>
  <updated>2012-02-14T14:59:54-08:00</updated>
  <id>http://io.kodfabrik.com</id>
  <author>
    <name>Azer Koculu</name>
    <email>azerkoculu@gmail.com</email>
  </author>


  <entry>
    <title>Functional Way of Avoiding Nested Callbacks in JavaScript</title>
    <link href="http://io.kodfabrik.com//2012/02/13/functools.html"/>
    <updated>2012-02-13T00:00:00-08:00</updated>
    <id>/2012/02/13/functools</id>
    <content type="html">&lt;p&gt;&lt;a href='http://github.com/azer/functools'&gt;Functools&lt;/a&gt; is a minimal JavaScript library that provides functional programming utilities for manipulating functions and collections both synchronously and asynchronously. I&amp;#8217;ve been developing and using it in my almost all projects and want to show you how I avoid nested callbacks using it.&lt;/p&gt;

      &lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Function_composition_%28computer_science%29'&gt;Function composition&lt;/a&gt; is the first technique (and my favorite one) that I&amp;#8217;ll explain. To give an example for it, assume that we want to find all HTML files in a directory, read their content and send them to a friend via e-mail.&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// sendEmail.js&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;findHTMLFiles&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;path&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;implementation&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;readFiles&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;filenames&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;implementation&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;sendToAFriend&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;implementation&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;You may notice that the last two functions above take what its previous function produce, with no need of any modification. Which makes them pretty suitable for function composition:&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;compose&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;functools&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;compose&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

      &lt;span class='nx'&gt;compose&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;async&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;findHTMLFiles&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;readFiles&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;sendToAFriend&lt;/span&gt;&lt;span class='p'&gt;)(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/home/me/docs&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

      &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;OK :)&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;});&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;Looks much simpler compared to a regular code with 3 nested callbacks. Function composition may also remind you method chanining.&lt;/p&gt;

      &lt;p&gt;Second technique I would like to mention is &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/juxt'&gt;juxtaposition&lt;/a&gt;. Functools has both sync and async implementations of juxt. Even if you haven&amp;#8217;t used it yet on your projects, I think following example will be enough to give the whole idea of it:&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;setTimeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;100&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;bar&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;setTimeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;250&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;qux&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;setTimeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;50&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;So, we have the assume async functions above and need to take all the content of them in a minimalistic way;&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;juxt&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;functools&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;juxt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

      &lt;span class='nx'&gt;juxt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;async&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;bar&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;qux&lt;/span&gt;&lt;span class='p'&gt;)(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

      &lt;span class='nx'&gt;assert&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;equal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='nx'&gt;assert&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;equal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;bar&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='nx'&gt;assert&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;equal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;qux&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;});&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;Other powerful tools I like using are map, filter and reduce functions. As you expect, both sync and async implementations of them exist in Functools.&lt;/p&gt;

      &lt;p&gt;To give an example for map and reduce, assume that we have a list of filenames and want to merge the content of them. Here is the implementation using Functools:&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;functools&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;functools&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
      &lt;span class='nx'&gt;map&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;functools&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='nx'&gt;reduce&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;functools&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;reduce&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;filenames&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/home/me/docs/foo&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/home/me/docs/bar&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/home/me/docs/qux&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;readFile&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;path&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='nx'&gt;implementation&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;undefined&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;content&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;merge&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;async&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;readFile&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;filenames&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;contents&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;

      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;all&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;reduce&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;merge&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;contents&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

      &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;all&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// puts foo\nbar\nqux&lt;/span&gt;

      &lt;span class='p'&gt;});&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;To summarize, Functools has async implementations of some powerful functional programming tools that can let us avoid nesting callbacks.&lt;/p&gt;

      &lt;p&gt;There are more examples at the &lt;a href='http://github.com/azer/functools'&gt;homepage of Functools&lt;/a&gt;. Besides of the documentation of it, you may also take a look at &lt;a href='https://github.com/azer/combiner/blob/master/lib/combiner.js'&gt;Combiner&lt;/a&gt;, a command-line tool and library for finding and manipulating files. It&amp;#8217;s based on a middleware that lets us initialize different layers of map and filter functions.&lt;/p&gt;

      &lt;p&gt;It would also be very helpful to check the &lt;a href='https://github.com/azer/functools/blob/master/lib/functools.js'&gt;source code of Functools itself&lt;/a&gt;. You&amp;#8217;ll notice that it uses map and reduce functions a lot, to implement its remaining functionalities.&lt;/p&gt;

      &lt;p&gt;Please feel free to share your thoughts, recommandations and examples.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>Douglas Crockford - The State and Future of Javascript</title>
    <link href="http://io.kodfabrik.com//2010/10/13/standards-crockford.html"/>
    <updated>2010-10-13T00:00:00-07:00</updated>
    <id>/2010/10/13/standards-crockford</id>
    <content type="html">&lt;p&gt;&lt;em&gt;&amp;#8220;Just because something is a standard doesn&amp;#8217;t mean it is the right choice for every application. Like XML, for example.&amp;#8221;&lt;/em&gt; — &lt;a href='http://en.wikipedia.org/wiki/Douglas_Crockford'&gt;Douglas Crockford&lt;/a&gt;, &lt;a href='http://jsconfeu.blip.tv/file/2997761/'&gt;JSConf.eu&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>Thoughts on IE9 and Teleportation</title>
    <link href="http://io.kodfabrik.com//2010/09/23/ie9.html"/>
    <updated>2010-09-23T00:00:00-07:00</updated>
    <id>/2010/09/23/ie9</id>
    <content type="html">&lt;p&gt;Imagine a universe that is growing instantly with an environment that includes the necessary resources and basic means of production for its people who live peacefully without borders, governments or militaries. As a result of this, everything is free and all production devices are under control of all humanity, which means a vast increase in production. Additionally, the imagination-universe provides teleportation that makes it easier and faster to distribute/obtain products. Sounds so cool, doesn&amp;#8217;t it? I’m talking about the web, we invented a kind of a universe which includes a teleportation network by default! Everyone has access to free production tools (thanks to &lt;a href='http://fsf.org'&gt;the FSF movement&lt;/a&gt;) and can distribute them to the entire world, for almost free. The only problem that we couldn&amp;#8217;t solve is that we have to design our products for old teleportation clients since most of the people are not aware of modern teleportation tools because they prefer to live in private property of a genius Richie Rich.&lt;/p&gt;

      &lt;p&gt;Even though I’m pretty happy to see &lt;a href='http://en.wikipedia.org/wiki/Internet_Explorer_9#Improvements_on_previous_versions'&gt;the great technical effort&lt;/a&gt; on the future of Microsoft Internet Explorer, it’s a disappointment to see that there is still nothing improved about the business approach of Microsoft that seems to believe that they can act like an oil company, posess and control all of the production devices. This is why I’m still not excited about Internet Explorer 9. This may sound like as if I’m a fan of an any other web browser embracing more social business models (BTW My browser choice is &lt;a href='http://uzbl.org'&gt;UZBL&lt;/a&gt;) but I’m actually pretty ok with the technical approach of Microsoft. I’m following &lt;a href='http://blogs.msdn.com/b/ie'&gt;IEBlog&lt;/a&gt; for years and learning lots of things from the posts about their development experiences, also think that &lt;a href='http://msdn.com'&gt;MSDN&lt;/a&gt; (Compare it with Apple&amp;#8217;s mysterious reference pages) is one of the great resources for web developers. The only thing to which I oppose is business models of Microsoft products.&lt;/p&gt;

      &lt;p&gt;On the other hand, Internet Explorer isn’t the only proprietary browser which belongs to a commercial company, we have Safari and several mobile web browsers, too. The only difference between the IPhone&amp;#8217;s mobile browser and Internet Explorer 6 is that IPhone ones rendering engine is a little better, not much. Distribution methods -even though Webkit is open source, it&amp;#8217;s not perfect)- are almost same, except the companies are different. Most of the mobile browsers are IE6 candidates to me.&lt;/p&gt;

      &lt;p&gt;To summarize, the main issue about the web is whether to take the advantage of modern distribution methods or not. Even if all of the web browsers follow the web standards, we will continue to lose time for the software playing catch-up since implementation times differ between months and years. In my opinion, all of the rendering/javascript engines should be open source, able to update itself automatically and totally independently from browsers. This is what the web needs immediately.&lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;Many thanks to&lt;/strong&gt; &lt;a href='http://yusufarslan.net'&gt;Yusuf Arslan&lt;/a&gt; for reading draft versions of this.&lt;/p&gt;

      &lt;p&gt;vim: tw=100&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>Douglas Crockford on Inheritance</title>
    <link href="http://io.kodfabrik.com//2010/08/31/inheritance-crockford.html"/>
    <updated>2010-08-31T00:00:00-07:00</updated>
    <id>/2010/08/31/inheritance-crockford</id>
    <content type="html">&lt;p&gt;&lt;em&gt;&amp;#8220;I have been writing JavaScript for 8 years now, and I have never once found need to use an uber function. The super idea is fairly important in the classical pattern, but it appears to be unnecessary in the prototypal and functional patterns. I now see my early attempts to support the classical model in JavaScript as a mistake.&amp;#8221;&lt;/em&gt; — &lt;a href='http://javascript.crockford.com/inheritance.html'&gt;Douglas Crockford&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>Alan Perlis Quote</title>
    <link href="http://io.kodfabrik.com//2010/08/08/alan-perlis-quote.html"/>
    <updated>2010-08-08T00:00:00-07:00</updated>
    <id>/2010/08/08/alan-perlis-quote</id>
    <content type="html">&lt;p&gt;&lt;em&gt;&amp;#8220;It’s better to have 100 functions operate on 1 data structure than to have 10 functions operate on 10 data structures&amp;#8221;&lt;/em&gt; — &lt;a href='http://en.wikipedia.org/wiki/Alan_Perlis'&gt;Alan Perlis&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>Volume Widget For AwesomeWM 3.4</title>
    <link href="http://io.kodfabrik.com//2010/05/11/volume-widget-for-awesomewm.html"/>
    <updated>2010-05-11T00:00:00-07:00</updated>
    <id>/2010/05/11/volume-widget-for-awesomewm</id>
    <content type="html">&lt;p&gt;Ubuntu 9.10 was the distro I had been using for 10 months with AwesomeWM until my Arch Linux migration on last week. I started the migration by moving my development environment to the VPS located in Linode servers firstly, configuration of the hardware and desktop environment followed this step. During the configuration I noticed that most of the widgets in the AwesomeWM wiki doesn’t work with latest release. I took this situation as a sign  from the Gods of computer world to start learning Lua and read Programming In Lua book which is available to read online for free. A little training that took just 3-4 hours made me available to code a volume control widget for AwesomeWM. Here is the code:&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='lua'&gt;&lt;span class='c1'&gt;------------------------------&lt;/span&gt;
      &lt;span class='c1'&gt;-- Volume Widget For AwesomeWM 3.4&lt;/span&gt;
      &lt;span class='c1'&gt;-- Azer Koculu &amp;lt;azerkoculu@gmail.com&amp;gt;&lt;/span&gt;
      &lt;span class='c1'&gt;-- Wed Apr 7 01:34:35 UTC 2010&lt;/span&gt;
      &lt;span class='c1'&gt;------------------------------&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;widgetobj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;widget&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nb'&gt;type&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&lt;/span&gt;&lt;span class='s'&gt;textbox&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&lt;/span&gt;&lt;span class='s'&gt;volume_widget&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;})&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;channel&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;vmix0-outvol&amp;quot;&lt;/span&gt;

      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;increase&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;util&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;spawn&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;ossvol -i 3&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;decrease&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;util&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;spawn&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;ossvol -d 3&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;update&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;fd&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;io.popen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;ossmix &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;channel&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;widgetobj&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;text&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&lt;/span&gt;&lt;span class='s'&gt;VOL&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;fd&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;*all&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;&lt;span class='n'&gt;match&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;(%d+%.%d+)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;fd&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;mute&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;util&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;spawn&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;ossvol -t&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='n'&gt;widgetobj&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;buttons&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;util&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;table&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;join&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
      &lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;button&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&lt;/span&gt;&lt;span class='s'&gt;4&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;increase&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
      &lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;button&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&lt;/span&gt;&lt;span class='s'&gt;5&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;decrease&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
      &lt;span class='n'&gt;awful&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;button&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&lt;/span&gt;&lt;span class='s'&gt;1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;mute&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;))&lt;/span&gt;

      &lt;span class='cm'&gt;--[[&lt;/span&gt;
      &lt;span class='cm'&gt;globalkeys = awful.util.table.join(globalkeys,&lt;/span&gt;
      &lt;span class='cm'&gt;awful.key({ }, &amp;quot;XF86AudioRaiseVolume&amp;quot;, increase,&lt;/span&gt;
      &lt;span class='cm'&gt;awful.key({ }, &amp;quot;XF86AudioLowerVolume&amp;quot;, decrease,&lt;/span&gt;
      &lt;span class='cm'&gt;awful.key({ }, &amp;quot;XF86AudioMute&amp;quot;, mute)&lt;/span&gt;
      &lt;span class='cm'&gt;)&lt;/span&gt;
      &lt;span class='cm'&gt;]]&lt;/span&gt;&lt;span class='c1'&gt;--&lt;/span&gt;

      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;utimer&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;timer&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='n'&gt;timeout&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;})&lt;/span&gt;
      &lt;span class='n'&gt;utimer&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;add_signal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;timeout&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;utimer&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;start&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

      &lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

      &lt;span class='n'&gt;volume&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='n'&gt;channel&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;channel&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='n'&gt;widget&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;widgetobj&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='n'&gt;increase&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;increase&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='n'&gt;decrease&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;decrease&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='n'&gt;mute&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;mute&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;volume&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;I also coded an unnecessary wallpaper package without checking out man page of awsetbg, which provides randomizing already.&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='lua'&gt;&lt;span class='c1'&gt;----------------------&lt;/span&gt;
      &lt;span class='c1'&gt;-- Random Wallpaper Package For Awesome WM&lt;/span&gt;
      &lt;span class='c1'&gt;-- Azer Koculu &amp;lt;azerkoculu@gmail.com&amp;gt;&lt;/span&gt;
      &lt;span class='c1'&gt;--&lt;/span&gt;
      &lt;span class='c1'&gt;-- EXAMPLE USAGE&lt;/span&gt;
      &lt;span class='c1'&gt;-- ------------&lt;/span&gt;
      &lt;span class='c1'&gt;-- require &amp;quot;wallpaper&amp;quot;&lt;/span&gt;
      &lt;span class='c1'&gt;-- theme.wallpaper_cmd = &amp;quot;awsetbg &amp;quot; .. wallpaper.pick( wallpaper.collect { &amp;quot;/home/foo/pic/wal1&amp;quot;, &amp;quot;/home/foo/pic/wal2&amp;quot; } )&lt;/span&gt;
      &lt;span class='c1'&gt;--&lt;/span&gt;
      &lt;span class='c1'&gt;----------------------&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;image_extensions&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='n'&gt;jpg&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;png&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='kc'&gt;true&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='c1'&gt;-- test whether given filename is an image&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;is_image&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;image_extensions&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;match&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;%.(%w+)$&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='c1'&gt;-- gather images from the passed directories&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;collect&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dirs&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;images&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
      &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;table&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;getn&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dirs&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='n'&gt;dir&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;dirs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;io.popen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;ls &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='n'&gt;dir&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;&lt;span class='n'&gt;lines&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;is_image&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;file&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;then&lt;/span&gt;
      &lt;span class='nb'&gt;table.insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;images&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;dir&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;file&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;images&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='c1'&gt;-- pick a random item from given table&lt;/span&gt;
      &lt;span class='kd'&gt;local&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;pick&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;table&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;getn&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='k'&gt;then&lt;/span&gt;
      &lt;span class='nb'&gt;math.randomseed&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;os.time&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;el&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;math.random&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='p'&gt;)]&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;el&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='c1'&gt;-- declare exports&lt;/span&gt;
      &lt;span class='n'&gt;wallpaper&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='n'&gt;extensions&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;image_extensions&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='n'&gt;collect&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;collect&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='n'&gt;pick&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;pick&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;wallpaper&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content>
  </entry>

  <entry>
    <title>Lispy Fluent Interfaces In Javascript</title>
    <link href="http://io.kodfabrik.com//2010/05/11/lispy-fluent-interfaces-javascript.html"/>
    <updated>2010-05-11T00:00:00-07:00</updated>
    <id>/2010/05/11/lispy-fluent-interfaces-javascript</id>
    <content type="html">&lt;p&gt;By inspiring from Lisp and the functional programming utilities came with Javascript 1.6, I’ve coded a new function to iterate arrays -especially for those containing DOM nodes- by providing an alternative fluent interface and chaining. Usage examples;&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// log elements of an array&lt;/span&gt;
      &lt;span class='nx'&gt;each&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

      &lt;span class='c1'&gt;// disable all form elements passing additional arguments&lt;/span&gt;
      &lt;span class='nx'&gt;each&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;querySelectorAll&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;input, select, textarea&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;setattr&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;disabled&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

      &lt;span class='c1'&gt;// apply header elements several dom manipulations&lt;/span&gt;
      &lt;span class='nx'&gt;each&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;querySelectorAll&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;header&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;fontSize&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;16px Arial,sans-serif&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;#ffff00&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;padding&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;3px&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;add_class&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Foobar&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;add_event&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt; &lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;})&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;And here is the source code:&lt;/p&gt;
      &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='cm'&gt;/**&lt;/span&gt;
      &lt;span class='cm'&gt; * A Function Providing Lispy Iteration For Javascript&lt;/span&gt;
      &lt;span class='cm'&gt; * @author Azer Koculu &amp;lt;azerkoculu@gmail.com&amp;gt;&lt;/span&gt;
      &lt;span class='cm'&gt; */&lt;/span&gt;
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;each&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;list&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;caller&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;fninitial&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;cargs&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;Array&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;slice&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;arguments&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;func&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;el&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;args&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;el&lt;/span&gt; &lt;span class='p'&gt;];&lt;/span&gt;
      &lt;span class='nb'&gt;Array&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;push&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;apply&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;args&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nx'&gt;cargs&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='nx'&gt;fninitial&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;apply&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;args&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='nb'&gt;Array&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;forEach&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;list&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;func&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;

      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;caller&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;caller&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;The function defined in the code above simply returns a function returning itself and taking a function with optional arguments to call it by passing the element being iterated and the optional arguments specified. Thus, the high-order-function I’ve pointed make the iteration chainable, as well.&lt;/p&gt;

      &lt;p&gt;P.S: Functional module of the new web framework I&amp;#8217;ve been working on provides some similar tools with much better implementation, which are available to be checked out;&lt;/p&gt;

      &lt;ul&gt;
      &lt;li&gt;&lt;a href='http://github.com/azer/roka/blob/master/src/core/functional.js'&gt;Source Code&lt;/a&gt;&lt;/li&gt;

      &lt;li&gt;&lt;a href='http://github.com/azer/roka/blob/master/test/suites/core/functional.js'&gt;Tests&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;</content>
  </entry>


</feed>

